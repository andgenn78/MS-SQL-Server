---================CREATE PROCEDURE #uspMyTempProcedure ASBEGIN  print 'This is a temporary procedure'ENDSET ANSI_NULLS ONGOSET QUOTED_IDENTIFIER ONGO-- =============================================-- Author:		-- Create date: 28/03/2022-- Description:	Моя первая процедура-- =============================================CREATE PROCEDURE Application_People	-- Add the parameters for the stored procedure here	@FullName nvarchar(50),	@SearchName nvarchar(50)ASBEGIN	-- SET NOCOUNT ON added to prevent extra result sets from	-- interfering with SELECT statements.	SET NOCOUNT ON;    -- Insert statements for procedure here	SELECT FullName, SearchName		FROM Application.People  		WHERE FullName = @FullName AND SearchName = @SearchName  		AND IsEmployee =1;  END----CREATE PROCEDURE Application_People       @FullName nvarchar(50),       @SearchName nvarchar(50)   AS       SET NOCOUNT ON;  	SELECT FullName, SearchName	FROM Application.People  	WHERE FullName = @FullName AND SearchName = @SearchName  	AND IsEmployee =1;  GO ----
IF OBJECT_ID ( 'Purchasing.uspVendorAllInfo', 'P' ) IS NOT NULL       DROP PROCEDURE Purchasing.uspVendorAllInfo;  GO  CREATE PROCEDURE Purchasing.uspVendorAllInfo  WITH EXECUTE AS CALLER  AS      SET NOCOUNT ON; 	     SELECT s.SupplierName AS Vendor, 		si.StockItemName AS 'Product name'    FROM Purchasing.PurchaseOrderLines o  --purchare line     INNER JOIN Warehouse.StockItems si    --item		ON si.StockItemID = o.StockItemID 	INNER JOIN Purchasing.Suppliers s     --supplier		ON s.SupplierID = si.SupplierID        ORDER BY s.SupplierName ASC;  GO SELECT name AS procedure_name       ,SCHEMA_NAME(schema_id) AS schema_name      ,type_desc      ,create_date      ,modify_date  FROM sys.procedures;--USE AdventureWorks2017;  EXEC sp_procoption @ProcName = '<procedure name>'       , @OptionName = ] 'startup'       , @OptionValue = 'on';  USE AdventureWorks2017;  GO  EXEC sp_procoption @ProcName = '<procedure name>'       , @OptionValue = 'off';---CREATE PROCEDURE Sales.uspGetSalesYTD  @SalesPerson nvarchar(50) = NULL  -- NULL default value  AS       SET NOCOUNT ON;     -- Validate the @SalesPerson parameter.  IF @SalesPerson IS NULL  BEGIN     PRINT 'ERROR: You must specify the last name of the sales person.'     RETURN  END  -- Get the sales for the specified sales person and   -- assign it to the output parameter.  SELECT CustomerID  FROM Sales.Customers AS c   WHERE c.CustomerName = @SalesPerson;  RETURN  GOexec Sales.uspGetSalesYTD  --- run with default value---exec Sales.uspGetSalesYTD 'Tailspin Toys (Biscay, MN)' --- run with 5---DECLARE @name NVARCHAR(50)SET @name = 'Tailspin Toys (Biscay, MN)'exec Sales.uspGetSalesYTD @name------USE WideWorldImporters;   GO  -- Create a procedure that takes one input parameter and returns one output parameter and a return code.CREATE PROCEDURE SampleProcedure @PersonIDParm INT,         @MaxTotal Date OUTPUTAS-- Declare and initialize a variable to hold @@ERROR.DECLARE @ErrorSave INTSET @ErrorSave = 0-- Do a SELECT using the input parameter.SELECT PreferredName, FullNameFROM Application.PeopleWHERE PersonID = @PersonIDParm-- Save any nonzero @@ERROR value.IF (@@ERROR <> 0)   SET @ErrorSave = @@ERROR-- Set a value in the output parameter.SELECT @MaxTotal = MAX(OrderDate)FROM Sales.Orders;IF (@@ERROR <> 0)   SET @ErrorSave = @@ERROR-- Returns 0 if neither SELECT statement had an error; otherwise, returns the last error.RETURN @ErrorSaveDECLARE @ReturnCode INTDECLARE @MaxTotalVariable dateEXEC @ReturnCode = SampleProcedure @PersonIDParm = 19,									@MaxTotal = @MaxTotalVariable OUTPUTPRINT ' 'PRINT 'Return code = ' + CAST(@ReturnCode AS CHAR(10))PRINT 'Max Quantity = ' + CAST(@MaxTotalVariable AS CHAR(10))------USE WideWorldImporters;   GO  IF OBJECT_ID('Sales.uspGetEmployeeSalesYTD', 'P') IS NOT NULL      DROP PROCEDURE Sales.uspGetEmployeeSalesYTD;  GO  CREATE PROCEDURE Sales.uspGetEmployeeSalesYTD  @SalesPerson int,  @SalesName varchar(50) OUTPUT  AS          SET NOCOUNT ON;      SELECT @SalesName =FullName  	FROM Application.People AS sp     WHERE PersonID = @SalesPerson;  RETURN  GO  USE WideWorldImporters;   GO  -- Declare the variable to receive the output value of the procedure.  DECLARE @SalesNameBySalesPerson varchar(50);  -- Execute the procedure specifying a last name for the input parameter  -- and saving the output value in the variable @SalesYTDBySalesPerson  EXECUTE Sales.uspGetEmployeeSalesYTD  			18, @SalesName = @SalesNameBySalesPerson OUTPUT;  -- Display the value returned by the procedure.  PRINT 'Year-to-date sales for this employee is ' +       convert(varchar(10),@SalesNameBySalesPerson);  GO----CURSORSGO  IF OBJECT_ID ( 'dbo.uspCitiesCursor', 'P' ) IS NOT NULL      DROP PROCEDURE dbo.uspCitiesCursor;  GO  CREATE PROCEDURE dbo.uspCitiesCursor       @CityCursor CURSOR VARYING OUTPUT  AS      SET NOCOUNT ON;      SET @CityCursor = CURSOR      FORWARD_ONLY STATIC FOR        SELECT CityID, CityName        FROM Application.Cities;      OPEN @CityCursor;  GO  --USE WideWorldImporters;     GO  DECLARE @MyCursor CURSOR;  EXEC dbo.uspCitiesCursor @CityCursor = @MyCursor OUTPUT;  WHILE (@@FETCH_STATUS = 0)  BEGIN;       FETCH NEXT FROM @MyCursor;  END;  CLOSE @MyCursor;  DEALLOCATE @MyCursor;  GO    ---USE WideWorldImporters;  GO  IF OBJECT_ID ( 'dbo.uspProductByCustomers', 'P' ) IS NOT NULL       DROP PROCEDURE dbo.uspProductByCustomers;  GO  CREATE PROCEDURE dbo.uspProductByCustomers @Name varchar(30) = '%'  WITH RECOMPILE  AS      SET NOCOUNT ON;      SELECT c.CustomerName AS 'Suct name', ol.StockItemID AS 'Product id'      FROM Sales.Customers AS c       JOIN Sales.Orders AS so         ON so.CustomerID = c.CustomerID       JOIN Sales.OrderLines AS ol         ON ol.OrderID = ol.OrderID      WHERE c.CustomerName LIKE @Name;---recompilation plan of procedureUSE WideWorldImporters;  GO  EXECUTE dbo.uspProductByCustomers  WITH RECOMPILE;  GO ---USE WideWorldImporters;  GO  SELECT OBJECT_DEFINITION (OBJECT_ID(N'WideWorldImporters.dbo.uspProductByCustomers'));---USE WideWorldImporters;  GO  IF OBJECT_ID ( 'Sales.uspCustomerAllInfo', 'P' ) IS NOT NULL       DROP PROCEDURE Sales.uspCustomerAllInfo;  GO  CREATE PROCEDURE Sales.uspCustomerAllInfo  WITH EXECUTE AS CALLER  AS      SET NOCOUNT ON;      SELECT c.CustomerName AS Customer, ol.StockItemID AS 'Product id'      FROM Sales.Customers AS c       JOIN Sales.Orders AS so         ON so.CustomerID = c.CustomerID       JOIN Sales.OrderLines AS ol         ON ol.OrderID = ol.OrderID      ORDER BY c.CustomerName ASC;   GO     --- who dependsSELECT referencing_schema_name, referencing_entity_name, referencing_id, referencing_class_desc, is_caller_dependent  FROM sys.dm_sql_referencing_entities ('Sales.uspCustomerAllInfo', 'OBJECT');   GO --- sys.dm_sql_referenced_entities--SELECT referenced_schema_name, referenced_entity_name,  referenced_minor_name,referenced_minor_id, referenced_class_desc,  is_caller_dependent, is_ambiguous  FROM sys.dm_sql_referenced_entities ('Sales.uspCustomerAllInfo', 'OBJECT'); GO ---SCALAR FUNCTIONCREATE FUNCTION dbo.ISOweek (@DATE datetime)  RETURNS int  WITH EXECUTE AS CALLER  AS  BEGIN       DECLARE @ISOweek int;       SET @ISOweek= DATEPART(wk,@DATE)+1            -DATEPART(wk,CAST(DATEPART(yy,@DATE) as CHAR(4))+'0104');  --Special cases: Jan 1-3 may belong to the previous year       IF (@ISOweek=0)             SET @ISOweek=dbo.ISOweek(CAST(DATEPART(yy,@DATE)-1                  AS CHAR(4))+'12'+ CAST(24+DATEPART(DAY,@DATE) AS CHAR(2)))+1;  --Special case: Dec 29-31 may belong to the next year       IF ((DATEPART(mm,@DATE)=12) AND             ((DATEPART(dd,@DATE)-DATEPART(dw,@DATE))>= 28))            SET @ISOweek=1;       RETURN(@ISOweek);  END;  GO  --runSET DATEFIRST 1;  SELECT dbo.ISOweek(CONVERT(DATETIME,'12/26/2004',101)) AS 'ISO Week'; ---TABLE FUNCTIONCREATE FUNCTION Sales.ufn_SalesByCustomer (@customerid int)  RETURNS TABLE  AS  RETURN   (      SELECT P.StockItemID, P.StockItemName, SUM(OL.Quantity) AS 'Total'      FROM Warehouse.StockItems AS P       JOIN Sales.OrderLines AS OL ON OL.StockItemID = P.StockItemID      JOIN Sales.Orders AS SO ON SO.OrderID = OL.OrderID      JOIN Sales.Customers AS C ON SO.CustomerID = C.CustomerID      WHERE SO.CustomerID = @customerid      GROUP BY P.StockItemID, P.StockItemName  );  GO    SELECT * FROM Sales.ufn_SalesByCustomer (2);--- SELECT definition, type   FROM sys.sql_modules AS m  JOIN sys.objects AS o ON m.object_id = o.object_id   GO  